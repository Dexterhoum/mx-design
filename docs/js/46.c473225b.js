"use strict";(self.webpackChunk_mx_design_example=self.webpackChunk_mx_design_example||[]).push([[46],{1031:(t,n,o)=>{o.r(n),o.d(n,{default:()=>w});var e=o(4154),p=o(4317),l=o(1855),i=o(4141),r=o(5849),s=o(7911),c={code:"\nimport { Tooltip, Button } from '@mx-design/web';\n\nfunction App() {\n  return (\n    <Tooltip content={() => \"This is a tooltip box\"}>\n      <Button>Hover me</Button>\n    </Tooltip>\n  )\n}",namespace:s.x},a={code:'\nimport { Tooltip, Button } from \'@mx-design/web\';\n\nfunction App() {\n  return (\n    <Space>\n      <Tooltip trigger="hover" showArrow content={() => "Hover me"}>\n        <Button>Hover me</Button>\n      </Tooltip>\n      <Tooltip themeStyle={{ \'--popup-wrapper-color\': \'red\' }} trigger="click" showArrow content={() => "Click me"}>\n        <Button onClick={() => console.log(\'Custom events\')}>Click me</Button>\n      </Tooltip>\n      <Tooltip trigger="context-menu" showArrow content={() => "Right click"}>\n        <Button>Right click</Button>\n      </Tooltip>\n    </Space>\n  );\n}',namespace:s.m$},m={code:"\nimport { Tooltip, Button } from '@mx-design/web';\n\nfunction App() {\n  const styles = {\n    container: {\n      margin: '0 auto',\n      width: '500px',\n      height: '260px',\n      position: 'relative',\n    },\n    placementTop: {\n      position: 'absolute',\n      top: '0',\n      left: '42%',\n    },\n    placementTopLeft: {\n      position: 'absolute',\n      top: '0',\n      left: '70px',\n    },\n    placementTopRight: {\n      position: 'absolute',\n      top: '0',\n      right: '70px',\n    },\n    placementBottom: {\n      position: 'absolute',\n      bottom: '0',\n      left: '42%',\n    },\n    placementBottomLeft: {\n      position: 'absolute',\n      bottom: '0',\n      left: '70px',\n      width: '120px',\n    },\n    placementBottomRight: {\n      position: 'absolute',\n      bottom: '0',\n      right: '70px',\n    },\n    placementLeft: {\n      position: 'absolute',\n      left: '0',\n      top: '42%',\n    },\n    placementLeftTop: {\n      position: 'absolute',\n      left: '0',\n      top: '50px',\n    },\n    placementLeftBottom: {\n      position: 'absolute',\n      left: '0',\n      bottom: '50px',\n    },\n    placementRight: {\n      position: 'absolute',\n      right: '0',\n      top: '42%',\n    },\n    placementRightTop: {\n      position: 'absolute',\n      right: '0',\n      top: '50px',\n    },\n    placementRightBottom: {\n      position: 'absolute',\n      right: '0',\n      bottom: '50px',\n    },\n  };\n  return (\n    <div style={styles.container}>\n      <Tooltip content={() => \"这是Tooltip内容\"} placement=\"top\" showArrow>\n        <Button style={styles.placementTop}>top</Button>\n      </Tooltip>\n      <Tooltip content={() => \"这是Tooltip内容 top-start\"} placement=\"top-start\" showArrow>\n        <Button style={styles.placementTopLeft}>top-start</Button>\n      </Tooltip>\n      <Tooltip content={() => \"这是Tooltip内容 top-end\"} placement=\"top-end\" showArrow>\n        <Button style={styles.placementTopRight}>top-end</Button>\n      </Tooltip>\n      <Tooltip content={() => \"这是Tooltip内容\"} placement=\"bottom\" showArrow>\n        <Button style={styles.placementBottom}>bottom</Button>\n      </Tooltip>\n      <Tooltip content={() => \"这是Tooltip内容 bottom-start\"} placement=\"bottom-start\" showArrow>\n        <Button style={styles.placementBottomLeft}>bottom-start</Button>\n      </Tooltip>\n      <Tooltip content={() => \"这是Tooltip内容 bottom-end\"} placement=\"bottom-end\" showArrow>\n        <Button style={styles.placementBottomRight}>bottom-end</Button>\n      </Tooltip>\n      <Tooltip content={() => \"这是Tooltip内容\"} placement=\"left\" showArrow>\n        <Button style={styles.placementLeft}>left</Button>\n      </Tooltip>\n      <Tooltip\n        content={() => \"这是Tooltip内容   left-start\"}\n        placement=\"left-start\"\n        overlayStyle={{ width: '140px' }}\n        showArrow\n      >\n        <Button style={styles.placementLeftTop}>left-start</Button>\n      </Tooltip>\n      <Tooltip\n        content={() => \"这是Tooltip内容 left-end\"}\n        placement=\"left-end\"\n        overlayStyle={{ width: '140px' }}\n        showArrow\n      >\n        <Button style={styles.placementLeftBottom}>left-end</Button>\n      </Tooltip>\n      <Tooltip content={() => \"这是Tooltip内容\"} placement=\"right\" showArrow>\n        <Button style={styles.placementRight}>right</Button>\n      </Tooltip>\n      <Tooltip\n        content={() => \"这是Tooltip内容 right-start\"}\n        placement=\"right-start\"\n        overlayStyle={{ width: '140px' }}\n        showArrow\n      >\n        <Button style={styles.placementRightTop}>right-start</Button>\n      </Tooltip>\n      <Tooltip\n        content={() => \"这是Tooltip内容 right-end\"}\n        placement=\"right-end\"\n        overlayStyle={{ width: '140px' }}\n        showArrow\n      >\n        <Button style={styles.placementRightBottom}>right-end</Button>\n      </Tooltip>\n    </div>\n  );\n}",namespace:s.yX},u={code:"\nimport { Tooltip, Button } from '@mx-design/web';\n\nfunction App() {\n  const colors = [{\n    background: '#165DFF',\n    color: '#fff'\n  },\n  {\n    background: '#722ED1',\n    color: '#fff'\n  }];\n  return (\n    <Space>\n      <Tooltip overlayInnerStyle={colors[0]} content={() => \"This is a tooltip box\"}>\n        <Button style={colors[0]}>#165DFF</Button>\n      </Tooltip>\n      <Tooltip  overlayInnerStyle={colors[1]} content={() => \"This is a tooltip box\"}>\n        <Button style={colors[1]}>#722ED1</Button>\n      </Tooltip>\n    </Space>\n  );\n}",namespace:s.Ow},T=(0,e.A)((0,e.A)((0,e.A)((0,e.A)({},c.namespace,c),a.namespace,a),m.namespace,m),u.namespace,u),f=o(1753),h=o(6501);function y(t,n){var o=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),o.push.apply(o,e)}return o}function b(t){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?y(Object(o),!0).forEach((function(n){(0,e.A)(t,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):y(Object(o)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(o,n))}))}return t}const w=function(){var t=(0,r.Y)({namespace:f.MP}),n=(0,p.A)(t,1)[0],o=(0,l.useMemo)((function(){return Object.keys(n).map((function(t){return b(b({key:t},n[t]),T[t])}))}),[n,T]),e=(0,l.useMemo)((function(){return o.map((function(t){return{title:t.title,href:"#".concat(t.key)}}))}),[o]);return l.createElement(i.A,{titleList:e},o.map((function(t){return l.createElement(h.Qk,t)})))}}}]);