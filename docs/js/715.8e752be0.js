"use strict";(self.webpackChunk_mx_design_example=self.webpackChunk_mx_design_example||[]).push([[715],{6530:(n,e,o)=>{o.r(e),o.d(e,{default:()=>g});var t=o(8631),a=o(4154),d=o(4317),l=o(1855),i=o(4141),c=o(1753),r=o(5849),s=o(7557),u=o(7597),m={code:"\nimport { useModal, Button } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  return (\n    <Button\n      onClick={() => {\n        const modalId = Modal.add({\n          title: 'Modal Title',\n          content: (\n            <div>\n              You can customize modal body text by the current situation. This modal will be closed immediately once you press the OK\n              button.\n            </div>\n          ),\n          visible: true,\n          onCancel: () => Modal.remove(modalId),\n        });\n      }}\n    >\n      Open Modal\n    </Button>\n  );\n}",namespace:u.x},p={code:"\nimport { useModal, Button, MessageStore } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  return (\n    <Button\n      onClick={() => {\n        const modalId = Modal.add({\n          title: 'Modal Title',\n          content: <div>Form xxx</div>,\n          visible: true,\n          onCancel: () => Modal.remove(modalId),\n          okLoading: false,\n          onOk: () => {\n            Modal.update(modalId, { okLoading: true });\n            new Promise((res) => {\n              setTimeout(() => {\n                res('complete');\n              }, 2000);\n            }).then((data) => {\n              MessageStore.add({\n                type: 'success',\n                content: data,\n              });\n              Modal.remove(modalId);\n            });\n          },\n        });\n      }}\n    >\n      Open Modal with async logic\n    </Button>\n  );\n}",namespace:u.jg},M={code:"\nimport { useModal, Button, Space } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  return (\n    <Space>\n      <Button\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Modal Title',\n            content: (\n              <div>\n                You can customize modal footer\n              </div>\n            ),\n            visible: true,\n            onCancel: () => Modal.remove(modalId),\n            footer: <Button onClick={() => Modal.remove(modalId)}>OK</Button>\n          });\n        }}\n      >\n        Open Modal with customized footer\n      </Button>\n      <Button\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Modal Title',\n            content: (\n              <div>\n                You can customize modal footer\n              </div>\n            ),\n            visible: true,\n            footerAlign: 'left',\n            onCancel: () => Modal.remove(modalId),\n            footer: <Button onClick={() => Modal.remove(modalId)}>I'm left</Button>\n          });\n        }}\n      >\n         Open Modal with customized footer\n      </Button>\n      <Button\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Modal Title',\n            content: (\n              <div>\n                You can customize modal footer\n              </div>\n            ),\n            visible: true,\n            onCancel: () => Modal.remove(modalId),\n            footer: null\n          });\n        }}\n      >\n        Open Modal without footer\n      </Button>\n    </Space>\n  );\n}",namespace:u.wi},v={code:"\nimport { useModal, Button, Space } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  return (\n    <Space>\n      <Button\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Info Modal Title',\n            type: 'info',\n            content: <div>Info Modal</div>,\n            visible: true,\n            hideCancelBtn: true,\n            onCancel: () => Modal.remove(modalId),\n            onOk: () => Modal.remove(modalId),\n          });\n        }}\n      >\n        Info Modal\n      </Button>\n      <Button\n        type=\"brand\"\n        status=\"warning\"\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Warning Modal Title',\n            type: 'warning',\n            content: <div>Warning Modal</div>,\n            visible: true,\n            hideCancelBtn: true,\n            onCancel: () => Modal.remove(modalId),\n            onOk: () => Modal.remove(modalId),\n          });\n        }}\n      >\n        Warning\n      </Button>\n      <Button\n        type=\"brand\"\n        status=\"error\"\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Error Modal Title',\n            type: 'error',\n            content: <div>Error Modal</div>,\n            visible: true,\n            hideCancelBtn: true,\n            onCancel: () => Modal.remove(modalId),\n            onOk: () => Modal.remove(modalId),\n          });\n        }}\n      >\n        Error\n      </Button>\n\n      <Button\n        type=\"brand\"\n        status=\"success\"\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Error Modal Title',\n            type: 'success',\n            content: <div>Success Modal</div>,\n            visible: true,\n            hideCancelBtn: true,\n            onCancel: () => Modal.remove(modalId),\n            onOk: () => Modal.remove(modalId),\n          });\n        }}\n      >\n        Success\n      </Button>\n    </Space>\n  );\n}",namespace:u.Gb},f={code:"\nimport { useModal, Space, Button } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  return (\n    <Space>\n      <Button\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Modal Title',\n            content: (\n              <div>\n                Display a modal dialog at 50px to top\n              </div>\n            ),\n            visible: true,\n            themeStyle: { '--modal-top': '50px' },\n            onCancel: () => Modal.remove(modalId),\n          });\n        }}\n      >\n        Display a modal dialog at 50px to top\n      </Button>\n      <Button\n        onClick={() => {\n          const modalId = Modal.add({\n            title: 'Modal Title',\n            content: (\n              <div>\n                Vertically centered modal dialog\n              </div>\n            ),\n            visible: true,\n            themeStyle: { '--modal-top': 'calc(50% - 104px)' },\n            onCancel: () => Modal.remove(modalId),\n          });\n        }}\n      >\n        Vertically centered modal dialog\n      </Button>\n    </Space>\n  );\n}",namespace:u.yX},b={code:"\nimport { Modal, Button, IconLoading } from '@mx-design/web';\n\nfunction App() {\n  const Modal = useModal();\n  const sleep = async (time) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, time);\n    });\n  };\n\n  async function updateModal() {\n    const modalId = Modal.add({\n      title: 'Modal Title',\n      content: (\n        <div style={{ display: 'flex', alignItems: 'center' }}>\n          This modal will close after 1.5s. <IconLoading spin style={{ color: 'var(--brand-color)' }} />\n        </div>\n      ),\n      visible: true,\n      closable: false,\n      footer: null,\n    });\n    await sleep(1500);\n    Modal.update(modalId, {\n      type: 'success',\n      content: 'Update success!',\n    });\n    await sleep(500);\n    Modal.remove(modalId);\n  }\n\n  return <Button onClick={updateModal}>Update message</Button>;\n}",namespace:u.UT},I=(0,a.A)((0,a.A)((0,a.A)((0,a.A)((0,a.A)((0,a.A)({},m.namespace,m),p.namespace,p),M.namespace,M),v.namespace,v),f.namespace,f),b.namespace,b);function y(n,e){var o=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.push.apply(o,t)}return o}function B(n){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?y(Object(o),!0).forEach((function(e){(0,a.A)(n,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(o)):y(Object(o)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(o,e))}))}return n}const g=function(){var n=(0,r.Y)({namespace:c.CB}),e=(0,d.A)(n,1)[0],o=(0,l.useMemo)((function(){return Object.keys(e).map((function(n){return B(B({},e[n]),I[n])}))}),[e,I]),a=(0,l.useMemo)((function(){return o.map((function(n){return{title:n.title,href:"#".concat(n.namespace)}}))}),[o]);return l.createElement(i.A,{titleList:a},o.map((function(n){return l.createElement(s.Qk,(0,t.A)({key:n.namespace},n))})))}}}]);